})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({mission_raw
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({mission_raw, escape=F
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({mission_raw, escape=TRUE
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({mission_raw, escape=FALSE
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({mission_raw, escape=2:6
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({datatable(mission_raw, escape=FALSE)
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({DT::datatable(mission_raw, escape=FALSE)
#category <- event_data('plotly_click')$y
#container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({
category <- event_data('plotly_click')$y
container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({
category <- event_data('plotly_click')$y
container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All",width = '50%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({
category <- event_data('plotly_click')$y
container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All",width = '20%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({
category <- event_data('plotly_click')$y
container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All",width = '20%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <-renderDataTable({category <- event_data('plotly_click')$y
container()[container()$value==category,c(4,6)]
})
}
shinyApp(ui, server)
