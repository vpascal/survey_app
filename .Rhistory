ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values, Affiliation),]
View(values)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
xaxis=list(title='Number of responses'))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title ='How would improver core values?',
xaxis=list(title='Number of responses'))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title ='How PCOE core values could be improved.',
xaxis=list(title='Number of responses'))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All",width = '20%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp  %>% group_by(value) %>% summarise(n=sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if(input$selector == 'All'){
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title ='How PCOE mission could be improved.',
xaxis=list(title='Number of responses'))
})
output$table <-renderDataTable({category <- event_data('plotly_click')$y
datatable(container()[container()$value==category,c(4,6)], escape=F)
})
}
shinyApp(ui, server)
install.packages("shinythemes")
vision <- read_xlsx('text.xlsx', sheet = 'Vision')
vision <- melt(vision,id.vars = c('Affiliation','Category','Q7: Vision relevant',
'Q11: Vision'))
vision_raw <- vision[complete.cases(vision),]
temp_v <- vision %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
shinythemes::themeSelector(),
selectInput('visionselector',label = "Respondent:", choices =
c('All','Student','Faculty','Staff', 'Alumni'), selected = "All",width = '20%'),
plotlyOutput('chart2'),
dataTableOutput('table2')
)
server <- function(input, output,...){
vision <- reactive({
if(input$visionselector == 'All'){
temp_v <- temp_v  %>% group_by(value) %>% summarise(n=sum(n))
temp_v$value <- factor(temp_v$value, levels = unique(temp_v$value)[order(temp_v$n, decreasing = FALSE)])
temp_v
} else{
temp_v <- temp_v[temp_v$Affiliation == input$visionselector,]
temp_v$value <- factor(temp_v$value, levels = unique(temp_v$value)[order(temp_v$n, decreasing = FALSE)])
temp_v
}
})
container <- reactive({
if(input$visionselector == 'All'){
container <- vision_raw
container
} else {
container <- vision_raw[vision_raw$Affiliation == input$visionselector,]
container
}
})
output$chart2 <- renderPlotly({
plot_ly(vision(),x=vision()$n,y=vision()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title ='How PCOE vision could be improved.',
xaxis=list(title='Number of responses'))
})
output$table2 <- renderDataTable({category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape=F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title ='Improving PCOE core values.',
xaxis=list(title='Number of responses'),
yaxis=list(title='Topics'))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
values <- read_xlsx('text.xlsx', sheet = 'Values')
values <- melt(values,id.vars = c('Affiliation','Category','Q10: Relavant',
'Q8: Values'))
values_raw <- values[complete.cases(values),]
temp_vl <- values %>% group_by(value,Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('valueselector',label = "Respondent:",
choices = c('All','Student','Faculty','Staff', 'Alumni'),
selected = "All",width = '20%'),
plotlyOutput('chart3'),
dataTableOutput('table3')
)
server <- function(input, output,...){
values <- reactive({
if(input$valueselector == 'All'){
temp_vl <- temp_vl  %>% group_by(value) %>% summarise(n=sum(n))
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
} else{
temp_vl <- temp_vl[temp_vl$Affiliation == input$valueselector,]
temp_vl$value <- factor(temp_vl$value, levels = unique(temp_vl$value)[order(temp_vl$n, decreasing = FALSE)])
temp_vl
}
})
container <- reactive({
if(input$valueselector == 'All'){
container <- values_raw
container
} else
container <- values_raw[values_raw$Affiliation == input$valueselector,]
container
})
output$chart3 <- renderPlotly({
plot_ly(values(),x=values()$n,y=values()$value,type='bar') %>%
layout(margin = list(l = 200, pad = 4), font=list(size=12),
title =paste0('Improving PCOE core values: ',input$valueselector),
xaxis=list(title='Number of responses'))
})
output$table3 <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category,c(4,6)],escape = F)
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices =
c('All respondents','Students','Faculty','Staff', 'Alumni'),
selected = "All respondents",width = '20%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if (input$selector == 'All respondents') {
temp <- temp  %>% group_by(value) %>% summarise(n = sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if (input$selector == 'All respondents') {
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),
x = mission()$n,
y = mission()$value,
type = 'bar') %>%
layout(
margin = list(l = 200, pad = 4),
font = list(size = 12),
title = paste0('Improving PCOE mission: ', input$selector),
xaxis = list(title = 'Number of responses')
)
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category, c(4, 6)], escape = F,
options = list(dom = 't'))
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(shiny)
library(DT)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission_raw <- mission[complete.cases(mission),]
temp <- mission_raw %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices =
c('All respondents','Students','Faculty','Staff', 'Alumni'),
selected = "All respondents",width = '20%'),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,session){
mission <- reactive({
if (input$selector == 'All respondents') {
temp <- temp  %>% group_by(value) %>% summarise(n = sum(n))
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
container <- reactive({
if (input$selector == 'All respondents') {
container <- mission_raw
container
} else
container <- mission_raw[mission_raw$Affiliation == input$selector,]
container
})
output$chart <- renderPlotly({
plot_ly(mission(),
x = mission()$n,
y = mission()$value,
type = 'bar') %>%
layout(
margin = list(l = 200, pad = 4),
font = list(size = 12),
title = paste0('Improving PCOE mission: ', input$selector),
xaxis = list(title = 'Number of responses')
)
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
datatable(container()[container()$value == category, c(4, 6)],
colnames = c("Comment","Topic"),
escape = F,
options = list(dom = 't'))
})
}
shinyApp(ui, server)
