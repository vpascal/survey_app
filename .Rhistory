plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
if(length(category) == 0){
#   mission[,c(4,6)]
NULL
} else {
mission()[mission()$value==category,c(2,3)]
}
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
if(length(category) == 0){
#   mission[,c(4,6)]
NULL
} else {
mission()[mission()$value==category,]
}
})
}
shinyApp(ui, server)
View(mission)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation,`Q5: Mission`) %>% summarise(n = n())
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation,`Q5: Mission`) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
if(length(category) == 0){
#   mission[,c(4,6)]
NULL
} else {
mission()[mission()$value==category,]
}
})
}
shinyApp(ui, server)
View(mission)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
output$table <- renderDataTable({
category <- event_data('plotly_click')$y
if(length(category) == 0){
#   mission[,c(4,6)]
NULL
} else {
mission[mission$value==category,]
}
})
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
View(temp)
View(mission)
View(temp)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
View(temp)
unique(temp$Affiliation)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == "All"){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp <- temp[temp$Affiliation %in% c("Student","Faculty","Staff","Alumni"),]
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
View(mission)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == 'All'){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All')),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == 'All'){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", c(unique(temp$Affiliation),'All'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == 'All'){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
View(temp)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == 'All'){
#temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
library(reshape2)
library(readxl)
library(dplyr)
library(plotly)
library(DT)
library(shiny)
mission <- read_xlsx('text.xlsx', sheet = 'Mission')
mission <- melt(mission,id.vars = c('Affiliation','Category','Q4: Mission relevant',
'Q5: Mission'))
mission <- mission[complete.cases(mission),]
temp <- mission %>% group_by(value, Affiliation) %>% summarise(n = n())
ui <- fluidPage(
selectInput('selector',label = "Respondent:", choices = c('All','Student','Faculty','Staff', 'Alumni'), selected = "All"),
plotlyOutput('chart'),
dataTableOutput('table')
)
server <- function(input, output,...){
mission <- reactive({
if(input$selector == 'All'){
temp <- temp
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
} else{
temp <- temp[temp$Affiliation == input$selector,]
temp$value <- factor(temp$value, levels = unique(temp$value)[order(temp$n, decreasing = FALSE)])
temp
}
})
output$chart <- renderPlotly({
plot_ly(mission(),x=mission()$n,y=mission()$value,type ='bar') %>% layout(margin = list(l = 200, pad = 4), font=list(size=12))
})
#  output$table <- renderDataTable({
#
#  category <- event_data('plotly_click')$y
#
#   if(length(category) == 0){
#    #   mission[,c(4,6)]
#     NULL
#  } else {
#      mission[mission$value==category,]
#    }
#  })
}
shinyApp(ui, server)
